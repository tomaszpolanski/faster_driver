import 'dart:io';

import 'package:faster_driver/src/file_system.dart';
import 'package:faster_driver/src/test_writer.dart';
import 'package:test/test.dart';

void main() {
  group('generateMainTest', () {
    late _MockFileSystem fileSystem;
    setUp(() {
      fileSystem = _MockFileSystem();
    });

    group('none', () {
      test('when no tests found', () async {
        fileSystem
          ..mockGetFiles = []
          ..mockGetCurrentDir = '';

        final result = await TestWriter(fileSystem).generateMainTest(
          directory: '/',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(result, 0);
        expect(fileSystem.mockCreateFile, isNull);
      });
    });

    group('arguments', () {
      test('are parsed', () {
        const arg1 = 'arg1';
        const arg2 = 'arg2';
        const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed
/// to source control
import 'package:integration_test/integration_test.dart';
import 'simple_test.dart' as simple;

void main() {
  final List<String> args = ['$arg1', '$arg2'];
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  simple.main();
}
''';
        fileSystem
          ..mockGetFiles = ['simple_test.dart']
          ..mockGetCurrentDir = '';

        TestWriter(fileSystem).generateMainTest(
          directory: '/',
          fileName: 'main_tests.dart',
          arguments: const [arg1, arg2],
        );

        expect(fileSystem.mockCreateFile, content);
      });

      test('are passed to mains', () {
        const arg1 = 'arg1';
        const arg2 = 'arg2';
        const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed
/// to source control
import 'package:integration_test/integration_test.dart';
import 'simple_test.dart' as simple;

void main() {
  final List<String> args = ['$arg1', '$arg2'];
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  simple.main(args);
}
''';
        const template = '''
#{{main-body}} =   {{import-name}}.main(args);
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed
/// to source control
import 'package:integration_test/integration_test.dart';
{{imports}}

void main() {
  final List<String> args = {{arguments}};
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
{{main-body}}
}
''';
        fileSystem
          ..mockGetFiles = ['simple_test.dart']
          ..mockGetCurrentDir = '';

        TestWriter(fileSystem).generateMainTest(
          directory: '/',
          fileName: 'main_tests.dart',
          arguments: const [arg1, arg2],
          templateOrPath: template,
        );

        expect(fileSystem.mockCreateFile, content);
      });
    });

    group('single', () {
      const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed
/// to source control
import 'package:integration_test/integration_test.dart';
import 'simple_test.dart' as simple;

void main() {
  final List<String> args = [];
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  simple.main();
}
''';

      test('dont crash when missing path', () {
        fileSystem
          ..mockGetFiles = ['simple_test.dart']
          ..mockGetCurrentDir = ''
          ..exists = false;

        TestWriter(fileSystem).generateMainTest(
          directory: '/',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(fileSystem.mockCreateFile, content);
      });

      test('writes single test', () {
        fileSystem
          ..mockGetFiles = ['simple_test.dart']
          ..mockGetCurrentDir = '';

        TestWriter(fileSystem).generateMainTest(
          directory: '/',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(fileSystem.mockCreateFile, content);
      });

      test('returns number of test files found', () async {
        fileSystem
          ..mockGetFiles = ['simple_test.dart']
          ..mockGetCurrentDir = '';

        final result = await TestWriter(fileSystem).generateMainTest(
          directory: '/',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(result, 1);
      });

      test(
        'parses path properly on windows',
        () {
          fileSystem
            ..mockGetFiles = [
              r'C:\Android\faster_driver\example\integration_test\simple_test.dart',
            ]
            ..mockGetCurrentDir =
                r'C:\Android\faster_driver\example\integration_test\';

          TestWriter(fileSystem).generateMainTest(
            directory: r'C:\Android\faster_driver\example\integration_test\',
            fileName: 'main_tests.dart',
            arguments: const [],
          );

          expect(fileSystem.mockCreateFile, content);
        },
        skip: !Platform.isWindows,
      );

      test('removes first slash', () {
        fileSystem
          ..mockGetFiles = [
            '/home/tomek/Documents/GitHub/faster_driver/example/integration_test/simple_test.dart',
          ]
          ..mockGetCurrentDir =
              '/home/tomek/Documents/GitHub/faster_driver/example/integration_test';
        TestWriter(fileSystem).generateMainTest(
          directory:
              '/home/tomek/Documents/GitHub/faster_driver/example/integration_test/',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(fileSystem.mockCreateFile, content);
      });

      test(
        'removes first backslash on windows',
        () {
          fileSystem
            ..mockGetFiles = [
              r'C:\Android\faster_driver\example\integration_test\simple_test.dart',
            ]
            ..mockGetCurrentDir =
                r'C:\Android\faster_driver\example\integration_test';

          TestWriter(fileSystem).generateMainTest(
            directory: r'C:\Android\faster_driver\example\integration_test\',
            fileName: 'main_tests.dart',
            arguments: const [],
          );

          expect(fileSystem.mockCreateFile, content);
        },
        skip: !Platform.isWindows,
      );

      test('uses current . dir properly', () {
        fileSystem
          ..mockGetFiles = [
            '/home/tomek/Documents/GitHub/faster_driver/example/integration_test/simple_test.dart',
          ]
          ..mockGetCurrentDir =
              '/home/tomek/Documents/GitHub/faster_driver/example/integration_test/.';
        TestWriter(fileSystem).generateMainTest(
          directory: '.',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(fileSystem.mockCreateFile, content);
      });
    });

    group('multiple', () {
      test('sorts imports and tests by name', () {
        const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed
/// to source control
import 'package:integration_test/integration_test.dart';
import 'a_test.dart' as a;
import 'b/recursive_test.dart' as b_recursive;

void main() {
  final List<String> args = [];
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  a.main();
  b_recursive.main();
}
''';
        fileSystem
          ..mockGetFiles = [
            'b/recursive_test.dart',
            'a_test.dart',
          ]
          ..mockGetCurrentDir = '';

        TestWriter(fileSystem).generateMainTest(
          directory: '.',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(fileSystem.mockCreateFile, content);
      });

      test('writes recursive tests', () {
        const content = '''
// ignore_for_file: directives_ordering
/// This file is autogenerated and should not be committed
/// to source control
import 'package:integration_test/integration_test.dart';
import 'inner/recursive_test.dart' as inner_recursive;
import 'simple_test.dart' as simple;

void main() {
  final List<String> args = [];
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  inner_recursive.main();
  simple.main();
}
''';
        fileSystem
          ..mockGetFiles = [
            'simple_test.dart',
            'inner/recursive_test.dart',
          ]
          ..mockGetCurrentDir = '';

        TestWriter(fileSystem).generateMainTest(
          directory: '.',
          fileName: 'main_tests.dart',
          arguments: const [],
        );

        expect(fileSystem.mockCreateFile, content);
      });
    });
  });
}

class _MockFileSystem implements FileSystem {
  String? mockCreateFile;
  bool exists = true;

  @override
  Future<void> createFile(Uri file, {required String content}) async {
    mockCreateFile = content;
  }

  late List<String> mockGetFiles;

  @override
  List<String> getFiles(
    Uri directory, {
    required bool Function(String path) predicate,
    bool recursive = true,
  }) {
    return mockGetFiles;
  }

  late String mockGetCurrentDir;

  @override
  String getCurrentDir(String file) {
    return mockGetCurrentDir;
  }

  @override
  String? fullPath(String path) {
    return null;
  }

  @override
  bool existsSync(String path) {
    return exists;
  }
}
